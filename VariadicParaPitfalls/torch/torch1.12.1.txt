{
    "/home/zhang/Packages/torch/torch1.12.1/utils/model_dump/__init__.py": [
        {
            "torch.utils.model_dump.__init__.get_info_and_burn_skeleton": 389,
            "get_model_info": [
                390,
                "[185]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/utils/tensorboard/_caffe2_graph.py": [
        {
            "torch.utils.tensorboard._caffe2_graph.protos_to_graph_def": 802,
            "_operators_to_graph_def": [
                820,
                "[628]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/fx/experimental/unification/multipledispatch/dispatcher.py": [
        {
            "torch.fx.experimental.unification.multipledispatch.dispatcher.Dispatcher.register": 119,
            "add": [
                140,
                "[170]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/_prims/__init__.py": [
        {
            "torch._prims.__init__._make_elementwise_unary_prim": 298,
            "_make_prim": [
                305,
                "[199]"
            ]
        },
        {
            "torch._prims.__init__._make_elementwise_binary_prim": 313,
            "_make_prim": [
                320,
                "[199]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/testing/_internal/common_utils.py": [
        {
            "torch.testing._internal.common_utils.TestCase.compare_with_reference": 2126,
            "assertEqual": [
                2134,
                "[2180]"
            ]
        },
        {
            "torch.testing._internal.common_utils.TestCase.compare_with_numpy": 2141,
            "assertEqual": [
                2173,
                "[2180]"
            ]
        },
        {
            "torch.testing._internal.common_utils.TestCase.assertEqualIgnoreType": 2175,
            "assertEqual": [
                2178,
                "[2180]"
            ]
        },
        {
            "torch.testing._internal.common_utils.TestCase.assertNotEqual": 2258,
            "assertEqual": [
                2261,
                "[2180]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/testing/_internal/common_methods_invocations.py": [
        {
            "torch.testing._internal.common_methods_invocations._reference_inputs_elementwise_unary": 2732,
            "generate_elementwise_unary_small_value_tensors": [
                2740,
                "[2648]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations._reference_inputs_elementwise_unary": 2732,
            "generate_elementwise_unary_large_value_tensors": [
                2747,
                "[2658]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations._reference_inputs_elementwise_unary": 2732,
            "generate_elementwise_unary_extremal_value_tensors": [
                2751,
                "[2668]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations.reference_inputs_elementwise_unary": 2755,
            "generate_elementwise_unary_noncontiguous_tensors": [
                2767,
                "[2679]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations.reference_inputs_elementwise_unary": 2755,
            "generate_elementwise_unary_arbitrarily_strided_tensors": [
                2771,
                "[2712]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations.sample_inputs_argsort": 4523,
            "sample_inputs_sort": [
                4524,
                "[4468]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations.sample_inputs_unique_consecutive": 4557,
            "sample_inputs_unique": [
                4558,
                "[4526]"
            ]
        },
        {
            "torch.testing._internal.common_methods_invocations.sample_inputs_reduction_count_nonzero": 5266,
            "sample_inputs_reduction": [
                5268,
                "[1117]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/onnx/symbolic_opset9.py": [
        {
            "torch.onnx.symbolic_opset9.div": 109,
            "_div_rounding_mode": [
                113,
                "[123]"
            ]
        },
        {
            "torch.onnx.symbolic_opset9.lstm": 3498,
            "_lstm_packed": [
                3500,
                "[3468]"
            ]
        },
        {
            "torch.onnx.symbolic_opset9.lstm": 3498,
            "_lstm_full": [
                3502,
                "[3437]"
            ]
        },
        {
            "torch.onnx.symbolic_opset9.var_mean": 4001,
            "_var_mean": [
                4005,
                "[3952]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/onnx/symbolic_opset10.py": [
        {
            "torch.onnx.symbolic_opset10.div": 25,
            "_div_rounding_mode": [
                29,
                "[33]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/distributed/fsdp/fully_sharded_data_parallel.py": [
        {
            "torch.distributed.fsdp.fully_sharded_data_parallel.FullyShardedDataParallel.forward": 2242,
            "module": [
                2280,
                "[1066]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/distributed/fsdp/flatten_params_wrapper.py": [
        {
            "torch.distributed.fsdp.flatten_params_wrapper.FlattenParamsWrapper.forward": 474,
            "module": [
                476,
                "[336]"
            ]
        }
    ],
    "/home/zhang/Packages/torch/torch1.12.1/distributed/pipeline/sync/pipe.py": [
        {
            "torch.distributed.pipeline.sync.pipe.PipeSequential.forward": 126,
            "module": [
                129,
                "[170]"
            ]
        }
    ]
}